# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : smc_analyzer.sm

import statemap


class SMAnalyzerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Comma(self, fsm):
        self.Default(fsm)

    def Digit(self, fsm, p):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Symbol(self, fsm, p):
        self.Default(fsm)

    def SymbolClose(self, fsm):
        self.Default(fsm)

    def SymbolFinish(self, fsm):
        self.Default(fsm)

    def SymbolOpen(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def WhiteSpace(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(SMAnalyzerState):

    def WhiteSpace(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def SymbolClose(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolOpen(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolFinish(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Comma(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

class MainMap_Start(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.ReturnType)
            fsm.getState().Entry(fsm)

class MainMap_ReturnType(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.ReturnType)
            fsm.getState().Entry(fsm)

    def WhiteSpace(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidRT() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.StartFuncName)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_StartFuncName(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.FuncName)
            fsm.getState().Entry(fsm)

class MainMap_FuncName(MainMap_Default):

    def Digit(self, fsm, p):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.incTmp(p)
            finally:
                fsm.setState(MainMap.FuncName)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Digit(self, fsm, p)
        
    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.incTmp(p)
            finally:
                fsm.setState(MainMap.FuncName)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Symbol(self, fsm, p)
        
    def SymbolOpen(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.OpenParam)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SymbolOpen(self, fsm)
        
    def WhiteSpace(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.WaitOpen)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_WaitOpen(MainMap_Default):

    def SymbolOpen(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.clearTmp()
        finally:
            fsm.setState(MainMap.OpenParam)
            fsm.getState().Entry(fsm)

class MainMap_OpenParam(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.TypeParam)
            fsm.getState().Entry(fsm)

    def SymbolClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.CloseParam)
        fsm.getState().Entry(fsm)

    def WhiteSpace(self, fsm):
        # No actions.
        pass

class MainMap_SecondTypeParam(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.TypeParam)
            fsm.getState().Entry(fsm)

class MainMap_TypeParam(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.TypeParam)
            fsm.getState().Entry(fsm)

    def WhiteSpace(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidRT() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.StartNameParam)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_StartNameParam(MainMap_Default):

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.incTmp(p)
        finally:
            fsm.setState(MainMap.NameParam)
            fsm.getState().Entry(fsm)

class MainMap_NameParam(MainMap_Default):

    def Comma(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.SecondTypeParam)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Comma(self, fsm)
        
    def Digit(self, fsm, p):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.incTmp(p)
            finally:
                fsm.setState(MainMap.NameParam)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Digit(self, fsm, p)
        
    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.incTmp(p)
            finally:
                fsm.setState(MainMap.NameParam)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Symbol(self, fsm, p)
        
    def SymbolClose(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.CloseParam)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SymbolClose(self, fsm)
        
    def WhiteSpace(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isValidFN() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clearTmp()
            finally:
                fsm.setState(MainMap.WaitNextParam)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_WaitNextParam(MainMap_Default):

    def Comma(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.SecondTypeParam)
        fsm.getState().Entry(fsm)

    def SymbolClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.CloseParam)
        fsm.getState().Entry(fsm)

class MainMap_CloseParam(MainMap_Default):

    def SymbolFinish(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(MainMap.Ok)
            fsm.getState().Entry(fsm)

class MainMap_Error(MainMap_Default):

    def Comma(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Symbol(self, fsm, p):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolClose(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolFinish(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolOpen(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def WhiteSpace(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

class MainMap_Ok(MainMap_Default):

    def EOS(self, fsm):
        # No actions.
        pass

class MainMap(object):

    Start = MainMap_Start('MainMap.Start', 0)
    ReturnType = MainMap_ReturnType('MainMap.ReturnType', 1)
    StartFuncName = MainMap_StartFuncName('MainMap.StartFuncName', 2)
    FuncName = MainMap_FuncName('MainMap.FuncName', 3)
    WaitOpen = MainMap_WaitOpen('MainMap.WaitOpen', 4)
    OpenParam = MainMap_OpenParam('MainMap.OpenParam', 5)
    SecondTypeParam = MainMap_SecondTypeParam('MainMap.SecondTypeParam', 6)
    TypeParam = MainMap_TypeParam('MainMap.TypeParam', 7)
    StartNameParam = MainMap_StartNameParam('MainMap.StartNameParam', 8)
    NameParam = MainMap_NameParam('MainMap.NameParam', 9)
    WaitNextParam = MainMap_WaitNextParam('MainMap.WaitNextParam', 10)
    CloseParam = MainMap_CloseParam('MainMap.CloseParam', 11)
    Error = MainMap_Error('MainMap.Error', 12)
    Ok = MainMap_Ok('MainMap.Ok', 13)
    Default = MainMap_Default('MainMap.Default', -1)

class SMAnalyzer_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
